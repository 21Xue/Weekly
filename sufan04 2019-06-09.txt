散列表

散列表也叫Hash表

我觉得这个可能是实际应用编程工程中最常用的数据结构。

Hash表的思想是数组支持按照下标随机访问数据，所以Hash表其实就是数组的一种扩展，由数组演化而来。

下标就是键（Key），把一个Key转换为下标的过程，其实就是一个mapping的过程，这个过程或者方法叫做散列函数（Hash函数）

由于都是通过下标访问，时间复杂程度为O(1)。

通过以上的描述，我们可以想到散列函数的重要性。

散列函数的特性：

1.必须前后一致，就是你输入一个info，假设转换为4，以后你每次通过你实现的散列函数，都必须且只能为4，否则没有任何意义了。

2.另一个就是不同的输入一定要是不同的数字，比如上面info是4，你输入apple，那么就是5。如果你输入任何东西得到的都是4，那也是无意义的。

关于冲突。

总结：再好的算法也无法避免散列冲突，只能解决，无法避免。

解决办法：常用的有两种。

1.开放寻址法
    如果即将插入的Key出现了冲突，那么就重新探测一个空间位置，将其插入。

    如何进行空间探测？

        1.线性探测：当我们往散列表中插入数据时，如果某个数据经过散列函数散列之后，存储位置已经被占用了，我们就从当前位置开始，依次往后查找，看是否有空闲位置，直到找到为止。
            缺点：当数据多，冲突概率大的情况下，需要探测的多，会是上升复杂程度。

        2.二次探测：其实是线性探测的变种，线性探测的时候，那它探测的下标序列就是 hash(key)+0，hash(key)+1,hask(key)+2....二次探测就是hash(key)+0，hash(key)+1*2,hask(key)+2*2...以二的二次方递增。

        3.双重散列，就是不仅要使用一个散列函数，要使用一组散列函数，hash1(key),hash2(key),hash3(key)...先用第一个，如果计算出来的已经被占用，那么就使用第二个，以此类推。
        
        其实可以看出，由于不管使用哪种空间探测，只是一个解决办法，无法避免冲突，当冲突越来越多的事情，所有的办法都会上升复杂度，使效率变低。

    
    为了保证效率，只能用空间换时间的办法，使用装载因子的策略。这样要保证一定比例的空闲，当达到装载因子的时候，就申请更大的空间。

    计算公式：装载因子=填入表中的元素个数/散列表的长度


2.链表法

    链表法，如果说开放寻址方法是在水平空间的办法，那么链表法就是在垂直空间的尝试。

        利用桶的概念，使用链表，把相同的散列值得元素放到相同的桶中。

    jdk 1.8 在链表法这个地方还引入了红黑树，可以使在链表中查找速度更快

总结：
可以结合散列函数和数组来创建散列表。
冲突很糟糕，应使用可以最大限度减少冲突的散列函数。
散列表的查找、插入和删除速度都非常快。
散列表适用于模拟映射关系。
一旦填装因子超过0.7，就该调整散列表的长度。
散列表可用于缓存数据（例如在Web服务器上）。
散列表非常适用于防止重复。

    
LeetCode：
我不知道多少人知道这个东西哦，上周的笔记评论中，有人说到了这个。

网址：https://leetcode.com/
目前有中文的：https://leetcode-cn.com

187.重复的DNA序列

所有 DNA 由一系列缩写为 A，C，G 和 T 的核苷酸组成，例如：“ACGAATTCCG”。在研究 DNA 时，识别 DNA 中的重复序列有时会对研究非常有帮助。

编写一个函数来查找 DNA 分子中所有出现超过一次的10个字母长的序列（子串）。

示例:

输入: s = "AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT"

输出: ["AAAAACCCCC", "CCCCCAAAAA"]

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/repeated-dna-sequences
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。


class Solution {
      public List<String> findRepeatedDnaSequences(String s) {
         Map<String, Integer> dnaMap = new HashMap<>();

        for (int i = 0; i <= s.length() - 10; i++) {
            String temp = s.substring(i, i + 10);
            dnaMap.merge(temp, 1, Integer::sum);
        }

        return dnaMap.keySet().stream().filter(key->dnaMap.get(key)>1).collect(Collectors.toList());
    }
}


关于上一次的更正，上次我图片中确实手误写错了。

中缀转后缀的规则：
1）如果遇到操作数，我们就直接将其输出。
2）如果遇到操作符，则我们将其放入到栈中，遇到左括号时我们也将其放入栈中。
3）如果遇到一个右括号，则将栈元素弹出，将弹出的操作符输出直到遇到左括号为止。注意，左括号只弹出并不输出。
4）如果遇到任何其他的操作符，如（“+”， “*”，“（”）等，从栈中弹出元素直到遇到发现更低优先级的元素(或者栈为空)为止。弹出完这些元素后，才将遇到的操作符压入到栈中。有一点需要注意，只有在遇到" ) "的情况下我们才弹出" ( "，其他情况我们都不会弹出" ( "。
5）如果我们读到了输入的末尾，则将栈中所有元素依次弹出。


那么2-3*4+5的转换过程

遇到2
栈：
输出：2


遇到-
栈：-
输出：2

遇到3
栈：-
输出：23

遇到*
栈：-*
输出：23

遇到4
栈：-*
输出：234

遇到+
这个时候栈中的操作符比“+”要高，需要弹出，直到空，然后再把+入栈
栈：+
输出：234*-

遇到5
栈：+
输出：234*-5

结束，把+出栈
输出：234*-5+

关于计算的中间结果和PC的寄存器关系：https://www.cnblogs.com/syw-casualet/p/5223595.html


