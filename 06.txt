狄克斯特拉算法
关于图的算法，从图的结构上看，我们可能想几种答案。
1.路径最短。
2.路径最快。

上周讲的广度优先算法，它找出的是段数最少的路径。
如果要找出最快的路径可使用另一种算法——狄克斯特拉算法。

狄克斯特拉算法
计算出不存在非负权重的情况下，起点到各个节点的最短距离。

可用于解决2类问题：
从A出发是否存在到达B的路径；
从A出发到达B的最短路径(时间最少、或者路径最少等)，事实上最后计算完成后，已经得到了A到各个节点的最短路径了；

算法的过程说明：
1.找出“最便宜”的节点，即可在最短时间内到达的节点。
2.更新该节点对应的邻居节点的开销。
3.重复这个过程，直到对图中的每个节点都这样做了。
4.计算最终路径。

根据算法的过程说明：
第一步：
起点--->A  花费时间 6
起点--->B  花费时间 2
找出最便宜的节点，就是起点到B，接下来计算节点B前往各个邻居节点所需要的时间，并更新原本需要花费更多的时间的节点

第二步：
B------>A    3+2=5
B------>终点  5+2=7
这个时候所有路线就变成了
起点------>A 6
起点------>B----->A   5
起点------>B----->终点 7
B已经做完了，不需要在对B进行处理，根据3的规则，A节点还没有做完。继续做A节点的。

第三步
A----->终点 1
就变成了
起点------>A----终点 6+1=7
起点------>B----->A--->终点   5+1=6

广度优先搜索来查找两点之间的最短路径，那时“最短路径”的意思是段数最少。在狄克斯特拉算法中，你给每段都分配了一个数字或权重，因此狄克斯特拉算法找出的是总权重最小的路径。


每条边都有关联数字的图，这些数字称为权重（weight）
带权重的图为加权图（weighted graph）,不带权重的图为非加权图（unweighted graph）
计算非加权图中的最短路径，可使用广度优先搜索。计算加权图中的最短路径，可使用狄克斯特拉算法。

可能会有环的存在：
绕环的路径不可能是最短的路径，在无向图中，每条边都是一个环。狄克斯特拉算法只适合于有向无环图。


总结：
1.广度优先算法BFS主要适用于无权重向图重搜索出步骤最少的路径，当方向图存在权重时，不再适用
2.狄克斯特拉算法Dijkstra主要用于有权重的方向图中搜索出最短路径，但不适合于有负权重的情况.对于环图，个人感觉和BFS一样，标志好已处理的节点避免进入死循环，可以支持
3.算法的实现主要都是为了避免没有更好的解决办法，而采用穷举法进行解决，当节点数量极大的情况下，算法的优势就会突显出来
