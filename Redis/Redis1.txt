学习心得与思考
新的一本书：《Redis设计与实现》

这本书是讲解Redis内部的运行机制和功能是如何实现还有实现的原理是什么。

并且展示了这些核心功能的数据结构和关键的算法思想。Redis作为缓存数据库被我们在项目和产品中广泛使用，了解其设计思想和原理对于架构有一定好处和帮助。

本书购买：
1.京东商城：https://item.jd.com/11486101.html
2.亚马逊：https://www.amazon.cn/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8A%80%E6%9C%AF%E4%B8%9B%E4%B9%A6-Redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0-%E9%BB%84%E5%81%A5%E5%AE%8F/dp/B00L4XHH0S
3.Kindle：https://www.amazon.cn/Redis/dp/B00LZNV5B4

源码：https://github.com/antirez/redis

本书主要有四大部分：
1.数据结构与对象
2.单机数据库的实现
3.多机数据库的实现
4.独立功能的实现

在数据结构的开始，讲的是简单的动态字符串（SDS，Simple Dynamic Strings）

Redis是使用C语言实现的，但是在Redis中，默认字符串是使用的SDS，并不是直接使用C语言的字符串。

C字符串在哪里使用？
C字符串只会作为字符串字面量用在一些无需对字符串值进行修改的地方。

SDS字符串在哪里使用？
当Redis需要的是一个可以被修改的字符串值时，Redis就会使用SDS来表示字符串值。

SDS的结构是如何的？
struct sdshdr｛
 //记录buf数组中已经使用字节的数量
 //等于SDS所保存字符串的长度
 int len;
 //记录buf数组中未使用字节的数量
 int free;
 //字节数组，用于保存字符串
 char buf[];
｝;


SDS与C语言字符串的区别：

1.常数复杂度获取字符串长度:

C字符串不记录自身的长度信息, 获取字符串长度时会遍历字节数组, 直到遇到空字符为止. 复杂度为 O(N)
SDS直接通过 len 属性获取字符串长度. 复杂度为O(1)

2.杜绝缓冲区溢出:
C字符串不记录自身长度, 修改字符串时不会判断本身是否拥有足够的内存空间, 当内存空间不足时, 则会造成缓冲区的溢出.
SDS对字符串进行修改时,先检查内存空间是否满足修改的需要, 若不满足, 则自动扩展SDS的内存空间. 所以使用SDS既不需要手动修改内存空间的大小, 也不会出现缓冲区溢出的情况.

3.空间预分配:
第一次创建字符串对象时, SDS不会分配冗余空间, 即 len = 0
当SDS的API修改SDS时, 则会为其分配冗余空间.
当修改后的SDS的 len 属性小于1MB时, 则为其分配和 len 同样大小的冗余空间, 即 free = len, 此时 buf [ ] 的实际长度 = len(实际长度) + free(冗余空间) + 1(空字符)
当修改后的SDS的 len 属性大于等于1MB时, 则为其分配1MB的冗余空间. buf [ ] 的实际长度 = len(实际长度) + free(1MB) + 1(空字符)

4.惰性空间释放
SDS的API缩短SDS的字符串时, 不会立即使用内存分配回收缩短后多出来的字节, 而是记录在 free 属性中, 并等待将来使用.