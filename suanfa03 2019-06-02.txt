关于一种特殊的数据结构，栈。

在最开始，讲了在计算机的体系中，链表和数组是比较基础的数据结构。但是这两种数据结构肯定不会满足任何的需求，当有特殊的需求时，数组和链表就满足不了了，就会把 数组或者链表加上新的需求来组合成一种新的数据结构。栈就是这么产生的，所以由此可见，栈是一种数组或者链表，有一些特殊需求在其中的数据结构。

栈的特殊需求：

1.只允许在一端进行插入或者删除操作。

2.要保持是线性的。

那么围绕这个栈就会有4种元素。

状态元素：1.是否为空 2.是否为满

操作元素：1.进栈（push） 2.出栈（pop）

数组实现的叫顺序栈

链表实现的叫链式栈

栈的应用：
根据栈的这些特点，应用场景很重要，在什么地方需要用到这种特殊的数据结构呢？

在进行思考那些场景需要用到的时候，尽量要让自己站在计算机的角度去思考问题，为什么要这么做呢？因为有些时候人的惯性思维会不理解。

1.括号匹配问题

2.历史浏览问题

3.后缀表达式

通常我们计算一个算式：X+Y,(操作数X，操作符+，操作数Y)；后缀表达式是(操作数X,操作数Y，操作符+)；


在后缀表达式中看，不存在括号，也不存在运算符优先级的差别，计算过程完全按照运算符出现的先后次序进行，整个计算过程仅需扫描一遍便可完成。

中缀表达式转后缀表达式 
如上图所示的，将左边的转换成右边的。

为了转换正确，必须设定一个运算符栈，并在栈底放入一个特殊算符，假定为@，让它具有最低的运算符优先级，此栈用来保存扫描中缀表达式得到的暂不能放入后缀表达式中的运算符，待它的两个运算对象都放入到后缀表达式之后，再令其出栈并写入到后缀表达式中。

转换过程如下：从头到尾扫描中缀表达式， 
(1)若遇到数字则直接写入后缀表达式， 
(2)若遇到运算符，则比较栈顶元素和该运算符的优先级,

(2.1)(* 或者/ )当该运算符的优先级大于栈顶元素的时候，表明该运算符的后一个运算对象还没有进入后缀表达式，应该把该运算符暂存于运算符栈中，然后把它的后一个运算对象写入到后缀表达式中，再令其出栈并写入后缀表达式中；(比如说*和/) 
　 
(2.2)(- 或者+)若遇到的运算符优先级小于等于栈顶元素的优先级，表明栈顶运算符的两个运算对象已经被写入后缀表达式，应将栈顶元素出栈并写入后缀表达式，对于新的栈顶元素仍进行比较和处理，直到栈顶元素为#，然后将新元素进栈。


